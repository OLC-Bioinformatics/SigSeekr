{
    "docs": [
        {
            "location": "/",
            "text": "What is SigSeekr?\n\n\nSigSeekr is a python pipeline for finding regions unique to one (or multiple) genomes when compared against an \nexclusion set of genomes. These regions can be of use as probes (either bioinformatically, or in a lab-based PCR approach)\nto quickly identify whether or not a new genome belongs with the genomes from the inclusion group used to generate the probes.\n\n\nHow does SigSeekr Work?\n\n\nSigSeekr uses a kmer-based approach for identifying regions that are unique to an inclusion group. It will create a list of all kmers that are (with size k=31)\nthat are common across all inclusion genomes specified, and then generates a list of all kmers that are found in the specified exclusion genomes. Any inclusion kmers that\nhave exact matches to exclusion kmers are then removed, leading to a list of kmers that have at least 1 nucleotide of difference from any exclusion kmer. In the event that\nno kmers unique to inclusion sequences are found the process will be repeated, but this time ignoring exclusion kmers with only one occurrence. (This cycle will continue if no\nunique kmers are found at one occurrence, going to two, then three, etc.)\n\n\nThe kmers found in the above steps will be suitable for bioinformatic purposes, but may not be sufficiently different from exclusion kmers to be used in a PCR reaction.\nOptionally, SigSeekr can attempt to find PCR-able amplicons that are sufficiently different from anything in an exclusion genome.",
            "title": "Home"
        },
        {
            "location": "/#what-is-sigseekr",
            "text": "SigSeekr is a python pipeline for finding regions unique to one (or multiple) genomes when compared against an \nexclusion set of genomes. These regions can be of use as probes (either bioinformatically, or in a lab-based PCR approach)\nto quickly identify whether or not a new genome belongs with the genomes from the inclusion group used to generate the probes.",
            "title": "What is SigSeekr?"
        },
        {
            "location": "/#how-does-sigseekr-work",
            "text": "SigSeekr uses a kmer-based approach for identifying regions that are unique to an inclusion group. It will create a list of all kmers that are (with size k=31)\nthat are common across all inclusion genomes specified, and then generates a list of all kmers that are found in the specified exclusion genomes. Any inclusion kmers that\nhave exact matches to exclusion kmers are then removed, leading to a list of kmers that have at least 1 nucleotide of difference from any exclusion kmer. In the event that\nno kmers unique to inclusion sequences are found the process will be repeated, but this time ignoring exclusion kmers with only one occurrence. (This cycle will continue if no\nunique kmers are found at one occurrence, going to two, then three, etc.)  The kmers found in the above steps will be suitable for bioinformatic purposes, but may not be sufficiently different from exclusion kmers to be used in a PCR reaction.\nOptionally, SigSeekr can attempt to find PCR-able amplicons that are sufficiently different from anything in an exclusion genome.",
            "title": "How does SigSeekr Work?"
        },
        {
            "location": "/installation/",
            "text": "System Requirements\n\n\nSigSeekr has been tested on Debian-based systems (in particular, Ubuntu and Mint), and should have no issue on other Linux-based distributions.\nThough not tested, SigSeekr should also work on MacOSX. Windows is not supported at this time.\n\n\nSigSeekr should be able to run on machines with as little as 8GB of RAM, provided that the \n--low_memory\n flag is enabled. It is also recommended that a decent amount of disk space is free (100GB for large runs), as the temporary files created in the kmer counting steps in the pipeline can use quite a bit of disk space.\n\n\nAny number of threads is usable with SigSeekr, with more generally being better.\n\n\nInstallation via conda\n\n\nThe easiest way to get SigSeekr up and running is by installing via conda. It's recommended that you create a conda environment first, and then install.\n\n\nIf you need to download and install miniconda:\n\n\n$ wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;\n$ bash miniconda.sh -b -p $HOME/miniconda\n$ export PATH=\"$HOME/miniconda/bin:$PATH\"\n$ conda install python=3.6.8\n$ conda update -q conda\n\n\n\n\nIf you need to add the required conda-forge and bioconda channels:\n\n\n$ conda config --add channels conda-forge\n$ conda config --add channels bioconda\n\n\n\n\nRecommended: create a conda environment:\n\n\n$ conda create -n sigseekr python=3.6.8\n$ conda activate sigseekr\n\n\n\n\nInstall the SigSeekr package from the olcbioinformatics conda channel\n\n\n$ conda install -y -c olcbioinformatics sigseekr=0.2.3=py_0\n\n\n\n\nThis command should install all dependencies, and make the SigSeekr script accessible from your terminal. \nYou should now be able to type \nsigseekr.py -h\n into your terminal and have the help menu for SigSeekr come up.\n\n\nYou can now \nrun\n SigSeekr.",
            "title": "Installation"
        },
        {
            "location": "/installation/#system-requirements",
            "text": "SigSeekr has been tested on Debian-based systems (in particular, Ubuntu and Mint), and should have no issue on other Linux-based distributions.\nThough not tested, SigSeekr should also work on MacOSX. Windows is not supported at this time.  SigSeekr should be able to run on machines with as little as 8GB of RAM, provided that the  --low_memory  flag is enabled. It is also recommended that a decent amount of disk space is free (100GB for large runs), as the temporary files created in the kmer counting steps in the pipeline can use quite a bit of disk space.  Any number of threads is usable with SigSeekr, with more generally being better.",
            "title": "System Requirements"
        },
        {
            "location": "/installation/#installation-via-conda",
            "text": "The easiest way to get SigSeekr up and running is by installing via conda. It's recommended that you create a conda environment first, and then install.  If you need to download and install miniconda:  $ wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;\n$ bash miniconda.sh -b -p $HOME/miniconda\n$ export PATH=\"$HOME/miniconda/bin:$PATH\"\n$ conda install python=3.6.8\n$ conda update -q conda  If you need to add the required conda-forge and bioconda channels:  $ conda config --add channels conda-forge\n$ conda config --add channels bioconda  Recommended: create a conda environment:  $ conda create -n sigseekr python=3.6.8\n$ conda activate sigseekr  Install the SigSeekr package from the olcbioinformatics conda channel  $ conda install -y -c olcbioinformatics sigseekr=0.2.3=py_0  This command should install all dependencies, and make the SigSeekr script accessible from your terminal. \nYou should now be able to type  sigseekr.py -h  into your terminal and have the help menu for SigSeekr come up.  You can now  run  SigSeekr.",
            "title": "Installation via conda"
        },
        {
            "location": "/usage/",
            "text": "Quickstart\n\n\nIf you want to run SigSeekr right away upon \ninstalling\n it, you can do so with a toy dataset.\n\n\nThis dataset is hosted on figshare - to get it, run the following command:\n\n\n\n\nwget https://ndownloader.figshare.com/files/9885379 && tar xf 9885379\n\n\n\n\nYou should now have a folder called \nexample-data\n in your present working directory. To run SigSeekr, enter the following command:\n\n\n\n\nsigseekr.py -i example-data/inclusion/ -e example-data/exclusion/ -o sigseekr_output -pcr -p3\n \n\n\n\n\nThe directory specified with the \n-o\n flag can be anything - it's the name of a directory where the output files will be created.\nUpon entering the command, you should see output that is something like this:\n\n\n2019-11-14 10:59:09 Creating inclusion kmer set...\n2019-11-14 10:59:25 Creating exclusion kmer set...\n2019-11-14 10:59:52 Subtracting exclusion kmers from inclusion kmers with cutoff 1...\n2019-11-14 10:59:54 Found kmers unique to inclusion...\n2019-11-14 10:59:57 Generating contiguous sequences from inclusion kmers...\n2019-11-14 11:00:41 Generating PCR info...\n2019-11-14 11:00:43 Finding amplicons of size 200...\n2019-11-14 11:01:26 Running Primer3 on potential amplicons...\n2019-11-14 11:01:31 SigSeekr run complete!\n\n\n\n\n\nThe \nsigseekr_output\n folder should have five files in it: \n\n\n\n\namplicons.csv\n : list of primers predicted by primer3 and the sizes of their products\n\n\ninclusion_kmers.fasta\n: lists all the kmers that are unique to the inclusion set\n\n\nsigseekr_log.txt\n: logfile of captured STDOUT and STDERR strings \n\n\nconfirmed_amplicons_200.fasta\n: FASTA-formatted file of amplicons present in all inclusion genomes (200 refers to \nthe amplicon size specified in the arguments. Default is 200, if multiple sizes are desired, multiple versions of\nthis file will be created.)\n\n\npotential_pcr_200.fasta\n: all potential amplicons based on user-specified amplicon length. This file will be further \nrefined by the filtering of amplicon sequences present in the exclusion genomes\n\n\nsigseekr_result.fasta\n: regions that unique kmers span\n\n\n\n\nThe \nsigseekr_result.fasta\n created by running SigSeekr on this toy dataset will have one unique region. \n\n\n>contig1_sequence1\nAACAGGCGACAGGCAGCATCACTAGCTACTA\n\n\n\n\nDetailed Usage\n\n\nDetailed usage options can be found by typing \nsigseekr.py --help\n, which will give the following output. \nFurther details on each option can be found below.\n\n\nusage: sigseekr.py [-h] -i INCLUSION -e EXCLUSION -o OUTPUT_FOLDER\n                   [-s KMER_SIZE] [-t THREADS] [-pcr] [-k]\n                   [-p PLASMID_FILTERING] [-l] [-p3]\n                   [-a AMPLICON_SIZE [AMPLICON_SIZE ...]]\n                   [-m MAX_POTENTIAL_AMPLICONS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INCLUSION, --inclusion INCLUSION\n                        Path to folder containing genome(s) you want signature sequences for. Genomes can be in FASTA \n                        or FASTQ format. FASTA-formatted files should be uncompressed, FASTQ-formatted files can be \n                        gzip-compressed or uncompressed.\n  -e EXCLUSION, --exclusion EXCLUSION\n                        Path to folder containing exclusion genome(s) - those you do not want signature sequences for. \n                        Genomes can be in FASTA or FASTQ format. FASTA-formatted files should be uncompressed, \n                        FASTQ-formatted files can be gzip-compressed or uncompressed.\n  -o OUTPUT_FOLDER, --output_folder OUTPUT_FOLDER\n                        Path to folder where you want to store output files. Folder will be created if it does not \n                        exist.\n  -s KMER_SIZE, --kmer_size KMER_SIZE\n                        Kmer size used to search for sequences unique to inclusion. Default 31. \n                        No idea how changing this affects results. TO BE INVESTIGATED.\n  -t THREADS, --threads THREADS\n                        Number of threads to run analysis on. Defaults to number of cores on your machine.\n  -pcr, --pcr           Enable to filter out inclusion kmers that have close relatives in exclusion kmers.\n  -k, --keep_tmpfiles   If enabled, will not clean up a bunch of (fairly) useless files at the end of a run.\n  -p PLASMID_FILTERING, --plasmid_filtering PLASMID_FILTERING\n                        To ensure unique sequences are not plasmid-borne, a FASTA-formatted database can be provided \n                        with this argument. Any unique kmers that are in the plasmid database will be filtered out.\n  -l, --low_memory      Activate this flag to cause plasmid filtering to use substantially less RAM (and go faster), \n                        at the cost of some sensitivity.\n  -p3, --primer3        If enabled, will run primer3 on your potential amplicons and generate a list of primers and the \n                        sizes of their products. This output will be found in a file called amplicons.csv in the output \n                        directory specified.\n  -a AMPLICON_SIZE [AMPLICON_SIZE ...], --amplicon_size AMPLICON_SIZE [AMPLICON_SIZE ...]\n                        Desired size for PCR amplicons. Default 200. If you want to find more than one amplicon size, \n                        enter multiple, separated by spaces.\n  -m MAX_POTENTIAL_AMPLICONS, --max_potential_amplicons MAX_POTENTIAL_AMPLICONS\n                        If inclusion sequences are very different from exclusion sequences, amplicon generation can take \n                        forever. Set the number of potential amplicons with this option (default 200)",
            "title": "Usage"
        },
        {
            "location": "/usage/#quickstart",
            "text": "If you want to run SigSeekr right away upon  installing  it, you can do so with a toy dataset.  This dataset is hosted on figshare - to get it, run the following command:   wget https://ndownloader.figshare.com/files/9885379 && tar xf 9885379   You should now have a folder called  example-data  in your present working directory. To run SigSeekr, enter the following command:   sigseekr.py -i example-data/inclusion/ -e example-data/exclusion/ -o sigseekr_output -pcr -p3     The directory specified with the  -o  flag can be anything - it's the name of a directory where the output files will be created.\nUpon entering the command, you should see output that is something like this:  2019-11-14 10:59:09 Creating inclusion kmer set...\n2019-11-14 10:59:25 Creating exclusion kmer set...\n2019-11-14 10:59:52 Subtracting exclusion kmers from inclusion kmers with cutoff 1...\n2019-11-14 10:59:54 Found kmers unique to inclusion...\n2019-11-14 10:59:57 Generating contiguous sequences from inclusion kmers...\n2019-11-14 11:00:41 Generating PCR info...\n2019-11-14 11:00:43 Finding amplicons of size 200...\n2019-11-14 11:01:26 Running Primer3 on potential amplicons...\n2019-11-14 11:01:31 SigSeekr run complete!  The  sigseekr_output  folder should have five files in it:    amplicons.csv  : list of primers predicted by primer3 and the sizes of their products  inclusion_kmers.fasta : lists all the kmers that are unique to the inclusion set  sigseekr_log.txt : logfile of captured STDOUT and STDERR strings   confirmed_amplicons_200.fasta : FASTA-formatted file of amplicons present in all inclusion genomes (200 refers to \nthe amplicon size specified in the arguments. Default is 200, if multiple sizes are desired, multiple versions of\nthis file will be created.)  potential_pcr_200.fasta : all potential amplicons based on user-specified amplicon length. This file will be further \nrefined by the filtering of amplicon sequences present in the exclusion genomes  sigseekr_result.fasta : regions that unique kmers span   The  sigseekr_result.fasta  created by running SigSeekr on this toy dataset will have one unique region.   >contig1_sequence1\nAACAGGCGACAGGCAGCATCACTAGCTACTA  Detailed Usage  Detailed usage options can be found by typing  sigseekr.py --help , which will give the following output. \nFurther details on each option can be found below.  usage: sigseekr.py [-h] -i INCLUSION -e EXCLUSION -o OUTPUT_FOLDER\n                   [-s KMER_SIZE] [-t THREADS] [-pcr] [-k]\n                   [-p PLASMID_FILTERING] [-l] [-p3]\n                   [-a AMPLICON_SIZE [AMPLICON_SIZE ...]]\n                   [-m MAX_POTENTIAL_AMPLICONS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INCLUSION, --inclusion INCLUSION\n                        Path to folder containing genome(s) you want signature sequences for. Genomes can be in FASTA \n                        or FASTQ format. FASTA-formatted files should be uncompressed, FASTQ-formatted files can be \n                        gzip-compressed or uncompressed.\n  -e EXCLUSION, --exclusion EXCLUSION\n                        Path to folder containing exclusion genome(s) - those you do not want signature sequences for. \n                        Genomes can be in FASTA or FASTQ format. FASTA-formatted files should be uncompressed, \n                        FASTQ-formatted files can be gzip-compressed or uncompressed.\n  -o OUTPUT_FOLDER, --output_folder OUTPUT_FOLDER\n                        Path to folder where you want to store output files. Folder will be created if it does not \n                        exist.\n  -s KMER_SIZE, --kmer_size KMER_SIZE\n                        Kmer size used to search for sequences unique to inclusion. Default 31. \n                        No idea how changing this affects results. TO BE INVESTIGATED.\n  -t THREADS, --threads THREADS\n                        Number of threads to run analysis on. Defaults to number of cores on your machine.\n  -pcr, --pcr           Enable to filter out inclusion kmers that have close relatives in exclusion kmers.\n  -k, --keep_tmpfiles   If enabled, will not clean up a bunch of (fairly) useless files at the end of a run.\n  -p PLASMID_FILTERING, --plasmid_filtering PLASMID_FILTERING\n                        To ensure unique sequences are not plasmid-borne, a FASTA-formatted database can be provided \n                        with this argument. Any unique kmers that are in the plasmid database will be filtered out.\n  -l, --low_memory      Activate this flag to cause plasmid filtering to use substantially less RAM (and go faster), \n                        at the cost of some sensitivity.\n  -p3, --primer3        If enabled, will run primer3 on your potential amplicons and generate a list of primers and the \n                        sizes of their products. This output will be found in a file called amplicons.csv in the output \n                        directory specified.\n  -a AMPLICON_SIZE [AMPLICON_SIZE ...], --amplicon_size AMPLICON_SIZE [AMPLICON_SIZE ...]\n                        Desired size for PCR amplicons. Default 200. If you want to find more than one amplicon size, \n                        enter multiple, separated by spaces.\n  -m MAX_POTENTIAL_AMPLICONS, --max_potential_amplicons MAX_POTENTIAL_AMPLICONS\n                        If inclusion sequences are very different from exclusion sequences, amplicon generation can take \n                        forever. Set the number of potential amplicons with this option (default 200)",
            "title": "Quickstart"
        }
    ]
}